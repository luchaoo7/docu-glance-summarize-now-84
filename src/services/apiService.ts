
// Simulates communication with a Python backend server
// This is a mock implementation for demonstration purposes

/**
 * Sends a document and questions to the backend server for processing
 */
export const submitDocumentForAnalysis = async (file: File, questions: string[]): Promise<any> => {
  console.log('Sending document to backend server:', file.name);
  console.log('Questions to analyze:', questions);
  
  // Simulate API call
  return new Promise((resolve, reject) => {
    // Create a FormData object to simulate file upload
    const formData = new FormData();
    formData.append('file', file);
    formData.append('questions', JSON.stringify(questions));
    
    // Log the FormData content (for demonstration)
    console.log('FormData prepared with file and questions');
    
    // Simulate network delay (1.5 seconds)
    setTimeout(() => {
      // In a real application, this would be an actual fetch call:
      // const response = await fetch('https://your-python-backend.com/analyze', {
      //   method: 'POST',
      //   body: formData
      // });
      
      // 90% chance of success (simulating occasional network errors)
      if (Math.random() < 0.9) {
        console.log('Document successfully processed by backend');
        // Return the same response format as our current mock implementation
        resolve({
          title: file.name,
          summary: "This document has been processed by our simulated backend server. In a real implementation, this would be the actual summary generated by the Python backend using NLP techniques. The summary would typically be several paragraphs analyzing the key content from your document.",
          keywords: ["backend", "processed", "analysis", "nlp", "document"],
          readingTime: Math.ceil(Math.random() * 10) + 3,
          questionAnswers: questions
            .filter(q => q.trim() !== '')
            .map(question => ({
              question,
              answer: `This is the answer to "${question}" as generated by our simulated backend processing. In a real implementation, this would be extracted or generated from your document content using NLP techniques.`
            }))
        });
      } else {
        console.error('Simulated backend error');
        reject(new Error('Failed to process document. Server error.'));
      }
    }, 1500);
  });
};
